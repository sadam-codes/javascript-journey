1- Object datatype 
2- key in Object
3- datatype of key ?
4- Unique Properties of Keys in JavaScript Objects
              Keys Are Always Strings or Symbols
              Keys Are Unique
              Order of Keys (integer and then string)
              Keys Can Store Functions

5- Hashing in js ? 
            Define ???
            The process of converting data (such as a string or object) into a fixed-size string of characters,
            often represented as a hash code or digest. Hashing is widely used in computer science and
            programming for purposes like quick data lookups, password storage, and ensuring data integrity.

            Key Features of Hashing ???
            i-  Fixed Output Size -: Regardless of the input size, a hash function generates a fixed-size output
            ii- Irreversible-: Hashing is generally one-way; it’s difficult to derive the original input from its hash value.

            Common Uses of Hashing in JavaScript ???
             i-  Password Security
            
            Hash Functions in JavaScript ???
            JavaScript doesn’t have a built-in hash function in its standard library, but you can use libraries like crypto (Node.js) or third-party libraries for hashing.
                 
            const crypto = require('crypto');

            // Create a hash from a string
            const hash = crypto.createHash('sha256')
                   .update('Hello, World!')
                   .digest('hex');

            console.log(hash); // Example output: "315f5bdb76d0f4b6c0d45d2161de00c51b3c11baf8304b0ccebebcd2"




6- Hashing vs. Encryption ?

              Hashing ???
              One-way, irreversible.
              Used for integrity checks and storing sensitive data like passwords.

              Encryption ???
              Two-way, reversible with a key.
              Used to securely transfer sensitive data.

7- Hoisting in js -
              Hoisting is a JavaScript mechanism where variables and function declarations are moved 
              (or hoisted) to the top of their containing scope during the compile phase, before the 
              code has been executed. This means that you can reference variables or functions before
              they are declared in the code.
                     
              Hoisting with var ? 

              console.log(myVar); // undefined (not ReferenceError)
              var myVar = 5;
              console.log(myVar); // 5

              Hoisting with let or const ? 

              console.log(myVar); // ReferenceError: Cannot access 'myVar' before initialization
              let myVar = 5;
 
uses of spread operator ?

8- Adding/Overriding Properties in Objects: ??

              let person = { name: "Alice", age: 25 };
              let updatedPerson = { ...person, age: 26, city: "New York" };
              console.log(updatedPerson);  // { name: "Alice", age: 26, city: "New York" }

9 - Combining Arrays and Objects with New Values ??
 
              let arr = [1, 2, 3];
              let newArr = [...arr, 4, 5];
              console.log(newArr);  // [1, 2, 3, 4, 5]

10- Array Copy:
              let arr = [1, 2, 3];
              let copyArr = [...arr];
              console.log(copyArr);  // [1, 2, 3]

11-
             let number;       // Declaratiqon
             number = 42;      // Initialization
             number = 100;     // Assignment (re-assignment)
             console.log(number); // Output: 100      

12- How do you declare a constant object in JavaScript, and can you modify its properties? 
    
            const person = { name: "John" };
            person.name = "Jane"; // Allowed
13- Can variables in JavaScript hold other variables or functions as values?

            let x = 10;
            let y = x;
            let func = function() { return "Hello"; };

14- What is variable shadowing in JavaScript?
            Shadowing occurs when a local variable in a function or block has the same name
            as a variable in the outer scope, hiding the outer variable.

15- What is the difference between null and undefined in JavaScript?
 
           null: An assigned value representing "no value" or "empty."
           undefined: A variable that has been declared but not assigned a value.

                    let a; // undefined
                    let b = null; // null

16- What is the purpose of async/await?

              async/await simplifies working with promises by allowing asynchronous code to look synchronous.

17-: What are objects in JavaScript?

               Objects in JavaScript are collections of key-value pairs. They are used to store 
               related data and functionality. Keys are strings (or symbols), and values can be of any type.
18- What is object destructuring?
             
              const obj = { name: "John", age: 30 };
              const { name, age } = obj;
              console.log(name); // Output: John
              console.log(age); // Output: 30

19 - How do you create an array in JavaScript?
              let arr = [1, 2, 3]; // Using square brackets
              let arr2 = new Array(4, 5, 6); // Using Array constructor
 
 20- How do you find the length of an array?
              let arr = [1, 2, 3];
              console.log(arr.length); // Output: 3
